#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <locale.h>
#include <string.h>
#include <stdlib.h>

void first_table(int array[11][11], char name[15][15], int size);
void second_table(int array[11][11], char name[15][15], int size);
int sum_time(int array[11][11], int i);
int penalty_time(int array[11][11], int i);
void showfile(char line[255], int size);
int writefile(char name[15][15], int array[11][11], int size);
int readfile(int array[11][11], char name[15][15], char filename, int size);
int sort_bubble(int array[11][11], int size, int index);
void add_person(int array[11][11], char name[15][15], int size);
int slowest(int array[11][11], int size);
int fastest(int array[11][11], int size);
int max_misses(int array[11][11], int size);
int min_misses(int array[11][11], int size);
int search_by_name(int array[11][11], char name[15][15], int size, char scanname[15]);
void show_person(int array[11][11], char name[15][15], int size, int index);
void sorted_table(int array[11][11], char name[15][15], int size);
void search_by_penalty_time(int array[11][11], char name[15][15], int size, int k1, int k2);
int search_by_time(int array[11][11], char name[15][15], int size, int time);


void main() {
	setlocale(LC_ALL, "RUS");
	char line[255];
	int end = 0;

	char name[15][15];
	int array[11][11];

	char scanname[15];
	//  1{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  2{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  3{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  4{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  5{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  6{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  7{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  8{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	//  9{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}
	// 10{t1, t2, t3, t4, t5, p1, p2, p3, p4, p5, place}

	int k1, k2;
	int x = 0, y, z, w, size;
	char buffer[20];
	puts("Введите количество участников");
	scanf("%d", &size);
	system("cls");
	while (end != 11) {
		x = 0;
		puts("\n---------------МЕНЮ---------------");
		puts("---------Выберите команду---------");
		puts("----------------------------------");
		puts("1. Добавить участников");
		puts("2. Записать данные в файл");
		puts("3. Считать данные с файла");
		puts("4. Вывести данные файла");
		puts("5. Вывести начальную таблицу");
		puts("6. Вывести конечную таблицу");
		puts("7. Самый быстрый/медленный спортсмен");
		puts("8. Поиск игрока по критерию");
		puts("9. Отсортировать по местам");
		puts("10. Поиск игроков в диапазоне штрафных очков");
		puts("11. Выход из программы");
		puts("----------------------------------\n");
		scanf("%d", &end);
		switch (end) {
		case 1:
			system("cls");
			add_person(array, name, size);
			break;

		case 2:
			system("cls");
			writefile(name, array, size);
			break;

		case 3:
			system("cls");
			readfile(array, name, "test.txt", size);
			break;

		case 4:
			system("cls");
			showfile(line, size);
			break;

		case 5:
			system("cls");
			first_table(array, name, size);
			break;

		case 6:
			system("cls");
			second_table(array, name, size);
			break;

		case 7:
			system("cls");
			while (x != 5) {
				puts("\n---------------МЕНЮ---------------");
				puts("---------Выберите команду---------");
				puts("----------------------------------");
				puts("1. Самый быстрый спортсмен");
				puts("2. Самый медленный спортсмен");
				puts("3. Спортсмен, имеющий наибольшее число промахов");
				puts("4. Спортсмен, имеющий наименьшее число промахов");
				puts("5. Назад в главное меню");
				puts("----------------------------------\n");
				scanf("%d", &x);
				switch (x) {
				case 1:
					system("cls");
					y = sum_time(array, fastest(array, size));
					z = penalty_time(array, fastest(array, size));
					printf("Самый быстрый спортсмен номер %d со временем %.2d:%.2d", (fastest(array, size) + 1), y / 60 + z, y % 60);
					break;

				case 2:
					system("cls");
					y = sum_time(array, slowest(array, size));
					z = penalty_time(array, slowest(array, size));
					printf("Самый медленный спортсмен номер %d со временем %.2d:%.2d", (slowest(array, size) + 1), y / 60 + z, y % 60);
					break;

				case 3:
					system("cls");
					y = max_misses(array, size);
					printf("Больше всего промахов у спортсмена %d с кол-вом промахов %d", y + 1, penalty_time(array, y));
					break;

				case 4:
					system("cls");
					y = min_misses(array, size);
					printf("Меньше всего промахов у спортсмена %d с кол-вом промахов %d", y + 1, penalty_time(array, y));
					break;

				case 5:
					break;
				}
			}
			break;

		case 8:
			system("cls");
			while (x != 3) {
				puts("\n---------------МЕНЮ---------------");
				puts("---------Выберите команду---------");
				puts("----------------------------------");
				puts("1. Поиск спортсмена по фамилии");
				puts("2. Поиск спортсмена по общему времени");
				puts("3. Назад в главное меню");
				puts("----------------------------------\n");
				scanf("%d", &x);
				switch (x) {
				case 1:
					system("cls");
					puts("Введите фамилию игрока");
					scanf("%s", &scanname);

					y = search_by_name(array, name, size, scanname);
					if (y != 404) {
						show_person(array, name, size, y);
					}
					else {
						puts("Спортсмен не найден");
					}

					break;

				case 2:
					system("cls");
					puts("Введите количество минут");
					scanf("%d", &w);
					puts("Введите количество секунд");
					scanf("%d", &y);
					z = search_by_time(array, name, size, w * 60 + y);
					if (z != 404) {
						show_person(array, name, size, z);
					}
					else {
						puts("Спортсмен не найден");
					}
					break;

				case 3:
					break;
				}
			}
			break;

		case 9:
			system("cls");
			sorted_table(array, name, size);
			break;
		case 10:
			puts("Введите начало диапазона k1: ");
			scanf("%d", &k1);
			puts("Введите конец диапазона k2 (включительно): ");
			scanf("%d", &k2);
			search_by_penalty_time(array, name, size, k1, k2);
			break;
		case 11:
			break;
		}
	}
}

void show_person(int array[11][11], char name[15][15], int size, int index) {
	printf("|---------------------------------------------------------------------------------------------|\n");
	printf("| Номер      |   Участник        | Время за 5 | Штрафное время | Общее время | Итоговое место |\n");
	printf("| участника  |                   | кругов     | (в минутах)    |             |                |\n");
	printf("|---------------------------------------------------------------------------------------------|\n");
	int p_time = penalty_time(array, index);
	int time5 = sum_time(array, index);
	printf("| %d          | %15s   | %.2d:%.2d      | %.2d             | %.2d:%.2d       | %d              |\n",
		array[index][10], name[index], time5 / 60, time5 % 60, p_time, time5 / 60 + p_time, time5 % 60, sort_bubble(array, size, index));
	printf("|---------------------------------------------------------------------------------------------|\n");
}

void add_person(int array[11][11], char name[15][15], int size) {
	char buffer[255];
	int x;
	for (int i = 0; i < size; i++) {
		array[i][10] = i + 1;
		printf("Фамилия участника %d: ", i + 1);
		scanf("%15s", &buffer);
		strcpy(name[i], buffer);
		for (int j = 0; j < 10; j++) {
			if (j < 5) {
				printf("Время за %d круг(в секундах): ", j + 1);
				scanf("%d", &x);
				array[i][j] = x;
			}
			else {
				printf("Промахов за %d круг: ", j % 5 + 1);
				scanf("%d", &x);
				array[i][j] = x;
			}
			printf("\n");
		}
	}
}

int writefile(char name[15][15], int array[11][11], int size) {
	FILE* ptr_file = fopen("test.txt", "w");
	if (ptr_file == NULL) {
		puts("Ошибка открытия файла");
		return 0;
	}
	for (int i = 0; i < size; i++) {
		fprintf(ptr_file, "%d %s %d %d %d %d %d %d %d %d %d %d\n",
			array[i][10], name[i], array[i][0], array[i][5], array[i][1], array[i][6], array[i][2], array[i][7], array[i][3], array[i][8], array[i][4], array[i][9]);
	}
	fclose(ptr_file);
	return 1;
}

int readfile(int array[11][11], char name[15][15], char filename, int size) {
	FILE* ptr_file = fopen("test.txt", "r");
	if (ptr_file == NULL) {
		puts("Ошибка открытия файла");
		return 0;
	}
	for (int i = 0; i < size; i++) {
		fscanf(ptr_file, "%d %s %d %d %d %d %d %d %d %d %d %d\n",
			&array[i][10], &name[i], &array[i][0], &array[i][5], &array[i][1], &array[i][6], &array[i][2], &array[i][7], &array[i][3], &array[i][8], &array[i][4], &array[i][9]);
	}
	fclose(ptr_file);
	return 1;
}

void showfile(char line[255], int size) {
	FILE* ptr_file = fopen("test.txt", "r");

	for (int i = 0; i < size; i++) {
		fgets(line, 255, ptr_file);
		printf("%s", line);
	}
	fclose(ptr_file);
}

void first_table(int array[11][11], char name[15][15], int size) {
	puts("|-----------------------------------------------------------------------------------------------------------------------------|");
	printf("| Номер      | Спортсмен            | 1     | промахи | 2     | промахи | 3     | промахи | 4     | промахи | 5     | промахи |\n");
	printf("| спортсмена | /круг                |       |         |       |         |       |         |       |         |       |         |\n");
	puts("|-----------------------------------------------------------------------------------------------------------------------------|");
	for (int i = 0; i < size; i++) {
		printf("| %d          | %15s      | %.2d:%.2d | %d       | %.2d:%.2d | %d       | %.2d:%.2d | %d       | %.2d:%.2d | %d       | %.2d:%.2d | %d       |\n",
			array[i][10], name[i],
			array[i][0] / 60, array[i][0] % 60, array[i][5],
			array[i][1] / 60, array[i][1] % 60, array[i][6],
			array[i][2] / 60, array[i][2] % 60, array[i][7],
			array[i][3] / 60, array[i][3] % 60, array[i][8],
			array[i][4] / 60, array[i][4] % 60, array[i][9]);
		puts("|-----------------------------------------------------------------------------------------------------------------------------|");
	}
}

void second_table(int array[11][11], char name[15][15], int size) {
	printf("|---------------------------------------------------------------------------------------------|\n");
	printf("| Номер      |   Участник        | Время за 5 | Штрафное время | Общее время | Итоговое место |\n");
	printf("| участника  |                   | кругов     | (в минутах)    |             |                |\n");
	printf("|---------------------------------------------------------------------------------------------|\n");
	for (int i = 0; i < size; i++) {
		int p_time = penalty_time(array, i);
		int time5 = sum_time(array, i);
		printf("| %d          | %15s   | %.2d:%.2d      | %.2d             | %.2d:%.2d       | %d              |\n",
			array[i][10], name[i], time5 / 60, time5 % 60, p_time, time5 / 60 + p_time, time5 % 60, sort_bubble(array, size, i));
		printf("|---------------------------------------------------------------------------------------------|\n");
	}
}

void sorted_table(int array[11][11], char name[15][15], int size) {
	int count = 1;
	printf("|---------------------------------------------------------------------------------------------|\n");
	printf("| Итоговое |   Участник        | Время за 5 | Штрафное время | Общее время | Номер участника  |\n");
	printf("|    место |                   | кругов     | (в минутах)    |             |                  |\n");
	printf("|---------------------------------------------------------------------------------------------|\n");
	for (int j = 0; j < size; j++) {
		for (int i = 0; i < size; i++) {
			if (sort_bubble(array, size, i) == count) {
				int p_time = penalty_time(array, i);
				int time5 = sum_time(array, i);
				printf("| %d        | %15s   | %.2d:%.2d      | %.2d             | %.2d:%.2d       | %d                |\n",
					sort_bubble(array, size, i), name[i], time5 / 60, time5 % 60, p_time, time5 / 60 + p_time, time5 % 60, array[i][10]);
				printf("|---------------------------------------------------------------------------------------------|\n");
				count++;
				i = 0;
			}
		}
	}
}

int search_by_name(int array[11][11], char name[15][15], int size, char scanname[15]) {
	for (int i = 0; i < size; i++) {
		if (strcmp(scanname, name[i]) == 0) {
			return i;
		}
	}
	return 404;
}

int search_by_time(int array[11][11], char name[15][15], int size, int time) {
	int ftime;
	for (int i = 0; i < size; i++) {
		ftime = sum_time(array, i) + penalty_time(array, i) * 60;
		if (ftime == time) {
			return i;
		}
	}
	return 404;
}

int sum_time(int array[11][11], int i) {
	int sum = 0;
	for (int j = 0; j <= 4; j++) {
		sum += array[i][j];
	}
	return sum;
}

int penalty_time(int array[11][11], int i) {
	int sum = 0;
	for (int j = 5; j <= 9; j++) {
		sum += array[i][j];
	}
	return sum;
}

int sort_bubble(int array[11][11], int size, int index) {
	int new_array[100];
	int tmp;

	int p_time = penalty_time(array, index);
	int time5 = sum_time(array, index);

	for (int i = 0; i < size; i++) {
		new_array[i] = sum_time(array, i) + penalty_time(array, i) * 60;
	}

	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - 1 - i; j++) {
			if (new_array[j] > new_array[j + 1]) {
				tmp = new_array[j];
				new_array[j] = new_array[j + 1];
				new_array[j + 1] = tmp;
			}
		}
	}

	for (int i = 0; i < size; i++) {
		if ((p_time * 60 + time5) == new_array[i]) {
			return i + 1;
		}
	}
	return -1;
}

int slowest(int array[11][11], int size) {
	int arr[10];
	int max = 0, mi;
	for (int i = 0; i < size; i++) {
		arr[i] = sum_time(array, i) + penalty_time(array, i) * 60;
		if (arr[i] > max) {
			max = arr[i];
			mi = i;
		}
	}
	return mi;
}

int fastest(int array[11][11], int size) {
	int arr[10];
	int min = 1000, mi;
	for (int i = 0; i < size; i++) {
		arr[i] = sum_time(array, i) + penalty_time(array, i) * 60;
		if (arr[i] < min) {
			min = arr[i];
			mi = i;
		}
	}
	return mi;
}

int max_misses(int array[11][11], int size) {
	int arr[10];
	int max = 0, mi;
	for (int i = 0; i < size; i++) {
		arr[i] = penalty_time(array, i);
		if (arr[i] > max) {
			max = arr[i];
			mi = i;
		}
	}
	return mi;
}

int min_misses(int array[11][11], int size) {
	int arr[10];
	int min = 1000, mi;
	for (int i = 0; i < size; i++) {
		arr[i] = penalty_time(array, i);
		if (arr[i] < min) {
			min = arr[i];
			mi = i;
		}
	}
	return mi;
}

void search_by_penalty_time(int array[11][11], char name[15][15], int size, int k1, int k2) {
	int cnt = 0;
	for (int i = 0; i < size; i++) {
		if ((penalty_time(array, i) >= k1) && (penalty_time(array, i) <= k2)) {
			cnt++;
			break;
		}
	}
	if (cnt > 0) {
		printf("|---------------------------------------------------------------------------------------------|\n");
		printf("| Номер      |   Участник        | Время за 5 | Штрафное время | Общее время | Итоговое место |\n");
		printf("| участника  |                   | кругов     | (в минутах)    |             |                |\n");
		printf("|---------------------------------------------------------------------------------------------|\n");
		for (int i = 0; i < size; i++) {
			if ((penalty_time(array, i) >= k1) && (penalty_time(array, i) <= k2)) {
				int p_time = penalty_time(array, i);
				int time5 = sum_time(array, i); {
					printf("| %d          | %15s   | %.2d:%.2d      | %.2d             | %.2d:%.2d       | %d              |\n",
						array[i][10], name[i], time5 / 60, time5 % 60, p_time, time5 / 60 + p_time, time5 % 60, sort_bubble(array, size, i));
					printf("|---------------------------------------------------------------------------------------------|\n");
				}
			}
		}
	}
	else puts("Участников со штрафным временем в данном диапазоне не существует");
}
